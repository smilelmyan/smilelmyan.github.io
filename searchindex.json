{"categories":[{"title":"Hugo博客","uri":"https://smilelmyan.github.io/categories/hugo%E5%8D%9A%E5%AE%A2/"},{"title":"i3桌面环境","uri":"https://smilelmyan.github.io/categories/i3%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/"},{"title":"ubuntu桌面应用","uri":"https://smilelmyan.github.io/categories/ubuntu%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"}],"posts":[{"content":"安装WPS 最近用的系统是Ubuntu 18.04，直接去官网下载就能安装。类似的像有道词典、网易云音乐都能直接在官网下载安装，用起来都不错，总觉得开源自由，真心希望国内linux的生态越来越好。\n装好wps提示缺字体，看了一下缺的字体也没什么用，就不装了。但是没有宋体、黑体、楷体之类的有点不方便，就按照之间安装latex的方法安装了几个常用字体。\nUbuntu的字体配置 WPS字体里面有好多乱七八杂的字体，有的不显示名字，有的提示系统缺失，真是不知道缺失为什么还要显示在列表里。想整理一下，查了半天也没找到办法，顺便记录Ubuntu字体配置路径：\n/etc/fonts/fonts.conf /etc/fonts/conf.d/69-language-selector-zh-cn.conf  第一个配置文件不能动，第二个是中文字体默认选择顺序，我用的是英文系统。原来Ubuntu默认的中文都是Noto字体，看着也可以，就不改了。\nWPS默认主题 如果不设置，新建文档默认的就是Calibri，而其我的系统也没安装，我在Options里的View替换成微软雅黑了。打开一个空白文档，在字体设置里面，Latin字体选Times New Roman，Asian字体选宋体SimSun，字号都选五号10.5pt，左下角点Default，以后再新建Word文档字体就随心了。\n同样可以在Page Layout的设置李设定一下A4纸，无网格什么的，保存成Default就好了。\n安装Rime输入法 Ubuntu下安装这个就够了，默认包含朙月拼音输入方案。官方文档上还有很多可选输入方案。然后打开官方的定制指南，边看边记：\n$sudo apt install ibus-rime  按组合键 Ctrl+` 或 F4 键唤出输入方案选单 在Linux中配置文件的位置为：~/.config/ibus/rime/。初次安装自动在里面部署预设的输入方案和设定文件，更改设定需重新部署。里面有用的文件：\n [全局设定] default.yaml [预设输入方案副本] \u0026lt;方案标识\u0026gt;.schema.yaml [安装信息] installation.yaml [用户状态信息] user.yaml [编译产生的二进制文件] *.bin [用户词典] \u0026lt;词典名\u0026gt;.userdb.kct  自动触发重新部署：\nrm ~/.config/ibus/rime/default.yaml; ibus-daemon -drx  我要定制自己的输入方案，需要创建default.custom.yaml文件，设定全局定制方案。创建\u0026lt;方案标识\u0026gt;.custom.yaml可以对预设方案进行定制。直接改动原配置文件，升级软件后会丢失。本人只需要简体输入法排在第一位，繁体输入法排在第二位备用，其它输入法删掉了。\npatch: schema_list: - schema: luna_pinyin_simp - schema: luna_pinyin  默认是纵向显示后选词的，在ibus-setup里面改成横向。\n这里没安装袖珍简化字拼音（librime-data-pinyin-simp)，是另一个简体中文的输入方案，找到的别人的配置。朙月拼音在输入简体中文时，是将繁体中文使用 OpenCC 转化成简体中文列在候选列表继而进行输入，有点小瑕疵。\n","id":0,"section":"posts","summary":"安装WPS 最近用的系统是Ubuntu 18.04，直接去官网下载就能安装。类似的像有道词典、网易云音乐都能直接在官网下载安装，用起来都不错，总","tags":["wps","Rime输入法"],"title":"Linux WPS 使用及 Rime 输入法安装","uri":"https://smilelmyan.github.io/2020/02/wps/","year":"2020"},{"content":"关于常见的 Linux 发行版包管理基本操作参见：Linux软件包管理基本操作入门\napt安装 基于Debian的发行版最初使用apt-get、apt-cache和apt-config三个命令处理系统软件包，apt的引入解决了命令分散的问题。\napt常用命令  apt install 安装软件包 apt remove 移除软件包 apt purge 移除软件包及配置文件 apt search 搜索应用程序 apt update 刷新本机存储软件信息数据库 apt upgrade 升级所有可升级的软件包 apt autoremove 自动删除不需要的软件包 apt full-upgrade 在升级软件包时自动处理依赖关系 apt show 显示软件包详细信息 apt list 显示符合条件的软件包  snap安装 apt用来安装软件源中的软件，不过软件源中更新的较慢。snap用来安装snapcraft软件商店中的软件，软件版本都比较新。snap是一种新的软件包管理工具，每个软件都被放到一个容器里，安装目录在/snap，用户home目录下也会生成snap目录来存放配置文件。\nsnap常用命令  snap list 列出已经安装的snap包 snap find 搜索要安装的软件包 snap instal 安装软件包 snap refresh 更新软件包 snap remove 删除软件包 snap info 查看软件包信息  设置 snap 代理 前置操作, 修改 systemctl edit 使用的编辑器为 VIM, 如果不介意 Nano 可以跳过这一步 $ sudo tee -a /etc/profile \u0026lt;\u0026lt;-'EOF' export SYSTEMD_EDITOR=\u0026quot;/bin/vim\u0026quot; EOF $ source /etc/profile  开始设置代理 $ sudo systemctl edit snapd 加上： [Service] Environment=\u0026quot;http_proxy=socks5://127.0.0.1:port\u0026quot; Environment=\u0026quot;https_proxy=socks5://127.0.0.1:port\u0026quot;  保存退出 $ sudo systemctl daemon-reload $ sudo systemctl restart snapd  ","id":1,"section":"posts","summary":"关于常见的 Linux 发行版包管理基本操作参见：Linux软件包管理基本操作入门 apt安装 基于Debian的发行版最初使用apt-get、apt-ca","tags":null,"title":"Ubuntu 18.04 软件安装","uri":"https://smilelmyan.github.io/2020/01/snap/","year":"2020"},{"content":"Markdown基础语法 Hugo 0.60以后采用Goldmark作为Markdown的默认引擎。它速度快符合CommonMark且非常灵活。需要注意的是Goldmark与Blackfriday的功能集是不同的。Blackfirday和MMark最终会被弃用。\n标题级别 一般采用#开头加空格。\n# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题  段落分割 段落的换行是使用两个以上空格加上回车，或者使用一个空行来表示重新开始一个段落。\n有序列表和无序列表。 无序列表使用星号 * 、加号 + 或是减号 - 作为开头标记。\n有序列表使用数字加上 . 开头标记，后面跟空格。\n1. 第一项： 2. 第二项： * 1 * 2  引用区块  区块引用是在段落开头使用 \u0026gt; 符号 ，然后后面紧跟一个空格符号。另外区块是可以嵌套的，一个 \u0026gt; 符号是最外层，两个 \u0026gt; 符号是第一层嵌套，以此类推。如果要在列表项目内放进区块，那么就需要在 \u0026gt; 前添加四个空格的缩进。\n 插入代码 嵌入式代码可以用反引号 ` 将代码包括起来。\n代码区块使用4个空格或者一个制表符开头，并维持缩进。也可以用 ``` 包裹一段代码。\n网址链接 文字上带有链接：[网址名称](链接地址)\n显示网址：\u0026lt;链接地址\u0026gt;，https://lmyan1992.github.io\n插入图片 插入链接与插入图片的语法很像，区别在前面加一个 !号，即![名称](地址)。\n粗体斜体 Markdown 的粗体和斜体，用 ** 包含一段文本就是粗体，用一个 * 包含一段文本就是斜体。\n表格 | 左对齐 | 右对齐 | 居中对齐 | | :-----| ----: | :----: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 |  符号转义和分割线 如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠 \\ 转义特殊字符。\n三个星号***代表分割线。\n Hugo 特别语法 Markdown 的简洁性本身就意味着它难以用来书写复杂的内容，尤其是涉及到展示效果的内容。Hugo 提供了 shortcode 来解决这一问题，既使内容保持了 Markdown 的简洁性，又允许创作者在文档中嵌入一些 Markdown 不支持的形式复杂的内容。简单来说，shortcode 是一些可以直接插入内容文档中的助记符，在 Hugo 生成网站时，会将这些助记符替换为相应的 HTML 代码片段（严格来说是模板片段）。\n用法格式： {{% shorcodename parameters %}}some content for shortcode template{{% /shortcodename %}}\n%作为定界符表示区间内容会被Markdown引擎处理，使用\u0026lt;\u0026gt;作为定界符则开闭标记区间内的文字不会被Markdown处理。为了只用于显示shortcode，使用 \\ 将大括号或定界符进行转义。\n代码高亮 {{\u0026lt; highlight python \u0026gt;}} A bunch of code here {{\u0026lt; /highlight \u0026gt;}}\ndef A bunch of code here  图片 用来扩展 Markdown 中插入图片的语法，该 shortcode 插入的图片支持自定义 CSS 类、添加链接和 caption 等，用法样例：\n{{\u0026lt; figure src=\u0026rdquo;/media/spf13.jpg\u0026rdquo; title=\u0026quot;Steve Francia\u0026rdquo; link=\u0026rdquo;\u0026rdquo; caption=\u0026rdquo;\u0026rdquo; class=\u0026rdquo;\u0026rdquo; attr=\u0026rdquo;\u0026rdquo; attrlink=\u0026rdquo;\u0026rdquo; alt=\u0026rdquo;\u0026rdquo; \u0026gt;}}\n文档引用 根据文档在本地文件系统中的路径，来插入文档的超链接，甚至可以引用文档标题位置，用法样例：\n [Neat]({{\u0026lt; ref \u0026ldquo;blog/neat.md\u0026rdquo; \u0026gt;}})\n[Who]({{\u0026lt; relref \u0026ldquo;about.md#who\u0026rdquo; \u0026gt;}})\n 参数为被引用文档的路径，Hugo 会自动将其替换为被引用文档的永久链接（permalink），ref 和 relref 的不同之处在于，后者给出相对链接，而前者给出完整链接。\nInstagram图片和YouTube视频 {{\u0026lt; youtube w7Ft2ymGmfc \u0026gt;}} {{\u0026lt; instagram BMokmydjG-M \u0026gt;}}\n","id":2,"section":"posts","summary":"Markdown基础语法 Hugo 0.60以后采用Goldmark作为Markdown的默认引擎。它速度快符合CommonMark且非常灵活。需要注","tags":null,"title":"Hugo Markdown基础语法","uri":"https://smilelmyan.github.io/2020/01/markdown/","year":"2020"},{"content":"Linux下有许多非线性视频剪辑软件，免费的有openshot、shotcut和kdenlive，付费的有davinci。推荐kdenlive的很多，功能也比较全。\nUbuntu下用snap安装 版本更新快，snap国内需要挂代理。\n$sudo snap install kdenlive\nArch linux 在 i3wm 下安装 $sudo pacman -S kdenlive  安装所缺失的组件\n$sudo pacman -S frei0r-plugin breeze  安装 breeze，则包含所需的 dark 主题，kdenlive 中主题可正常使用。\nKdenlive无法使用fcitx输入法 由于 wayland 无法读取 ~/.xprofile 中的环境变量，所以请在 /etc/environment 中加入：\nGTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx  可以正常用了。\n教程 ","id":3,"section":"posts","summary":"Linux下有许多非线性视频剪辑软件，免费的有openshot、shotcut和kdenlive，付费的有davinci。推荐kdenliv","tags":null,"title":"Kdenlive非线性视频剪辑软件","uri":"https://smilelmyan.github.io/2019/05/kdenlive/","year":"2019"},{"content":"Tor是用来实现匿名通信的软件，可以隐藏自己所在的公网IP，可以保护个人隐私，不过就是网速太慢。\nUbuntu安装SS $sudo apt install shadowsocks-libev simple-obfs  配置 /etc/shadowsocks-libev/config.json  添加信息\n{ \u0026quot;server\u0026quot;:\u0026quot;xxx\u0026quot;, \u0026quot;server_port\u0026quot;:xxx, \u0026quot;local_port\u0026quot;:1080, \u0026quot;password\u0026quot;:\u0026quot;xxx\u0026quot;, \u0026quot;timeout\u0026quot;:60, \u0026quot;method\u0026quot;:\u0026quot;xxx\u0026quot;, \u0026quot;plugin\u0026quot;:\u0026quot;obfs-local\u0026quot;, \u0026quot;plugin_opts\u0026quot;:\u0026quot;obfs=tls;failover=www.bing.com\u0026quot; }  开机启动文件\n/lib/systemd/system/shadowsocks-libev-local@.service  启动\n$sudo systemctl enable shadowsocks-libev-local@config $sudo systemctl start shadowsocks-libev-local@config $sudo systemctl status shadowsocks-libev-local@config  Archlinux安装 $sudo pacman -Syu tor  配置 /etc/tor/torrc  结尾增加：\nSocks5Proxy 127.0.0.1:1080 #通过 Shadowsocks 代理连接 ExcludeNodes {cn},{hk},{mo},{kp},{ir},{sy},{pk},{cu},{vn} #屏蔽蜜罐节点 strictnodes 1 # 严格节点模式  开机启动 $sudo systemctl enable tor  浏览器代理 127.0.0.1:9050  禁用JavaScript about:config  ","id":4,"section":"posts","summary":"Tor是用来实现匿名通信的软件，可以隐藏自己所在的公网IP，可以保护个人隐私，不过就是网速太慢。 Ubuntu安装SS $sudo apt install shadowsocks-libev simple-obfs 配置 /etc/shadowsocks-libev/config.json 添加信息","tags":null,"title":"Tor \u0026 SS 代理","uri":"https://smilelmyan.github.io/2019/01/tor-ss/","year":"2019"},{"content":"vsftpd 是“very secure FTP daemon”的缩写，安全性是它的一个最大的特点。vsftpd是一款在Linux发行版中最受推崇的FTP服务器程序。特点是小巧轻快，安全易用。\n用户 vsftpd使用ftp用户匿名登录，查看默认ftp用户的家目录\n$ cat /etc/passwd | grep ftp  默认是/srv/ftp，我把它改成了\n$ sudo usermod -d /var/ftp/pub ftp  之后在配置中填写以上目录，这个目录是不能设置为777权限的，要不然无法访问，还得再新建一个Public目录，777权限，匿名用户可以在里面进行所有操作。\n配置 开启全局写权限\nwrite_enable=YES\n允许匿名用户登录FTP\nanonymous_enable=YES\n设置匿名用户的登录目录\nanon_root=/var/ftp/pub\n打开匿名用户的上传权限\nanon_upload_enable=YES\n打开匿名用户创建目录的权限\nanon_mkdir_write_enable=YES\n打开匿名用户删除和重命名的权限（如需要，需自己添加）\nanon_other_write_enable=YES\n匿名用户的掩码\nanon_umask=000\n这下匿名用户什么权限都有了。\n","id":5,"section":"posts","summary":"vsftpd 是“very secure FTP daemon”的缩写，安全性是它的一个最大的特点。vsftpd是一款在Linux发行版中最受推崇的FTP服务器程序。特点是","tags":null,"title":"Vsftpd 匿名用户配置","uri":"https://smilelmyan.github.io/2018/09/vsftpd/","year":"2018"},{"content":"i3是一个非常有效率的窗口管理器。\n安装i3和状态栏 $ sudo pacman -S i3-gaps i3status  i3 配置 开机启动 在.xinitrc中添加\nexec i3  在.bashrc中添加\nif [[ \u0026quot;$(tty)\u0026quot; = \u0026quot;/dev/tty1\u0026quot; ]]; then pgrep i3 || startx fi  安装终端 $ sudo pacman -S rxvt-unicode  如果要在ranger中预览照片，aur安装rxvt-unicode-pixbuf\n配置文件 配置文件路径~/.congfig/i3/config，里面全部是i3的快捷键设置，一般把功能键改成win键\nset $mod Mod4  其它默认可以不动，比如win+enter能快速打开终端，win+d打开程序，目前做的改动\nbar { status_command /home/lmyan/.i3status.sh position top colors{ statusline #c7edcc separator #ceecee } } # set windows gaps for_window [class=\u0026quot;^.*\u0026quot;] border pixel 1 gaps inner 15 gaps outer 5 # adjust volume bindsym $Mod+minus exec --no-startup-id amixer set Master -q 5%- bindsym $Mod+plus exec --no-startup-id amixer set Master -q 5%+ # Print screen focused window bindsym Print exec --no-startup-id scrot -u '%Y%m%d_%H%M%S.png' -e 'mv $f ~/Pictures/shots/' # Print screen entire view bindsym $mod+Print exec --no-startup-id scrot '%Y%m%d_%Ho%M%S.png' -e 'mv $f ~/Pictures/shots/' # Print interactively choose a window bindsym --release $mod+Shift+Print exec --no-startup-id scrot -s '%Y%m%d_%H%M%S.png' -e 'mv $f ~/Pictures/shots/' # wallpaper exec --no-startup-id feh --bg-scale /home/lmyan/Pictures/arch2.png #urxvt transparent exec --no-startup-id xcompmgr \u0026amp; # input method exec --no-startup-id fcitx \u0026amp; # firefox bindsym $mod+i exec --no-startup-id firefox # media mpc bindsym $mod+p exec --no-startup-id mpc toggle bindsym $mod+comma exec --no-startup-id mpc prev bindsym $mod+period exec --no-startup-id mpc next bindsym $mod+Shift+p exec --no-startup-id ~/Desktop/i3script/removesong.sh # power management bindsym $mod+x exec systemctl suspend bindsym $mod+Shift+x exec systemctl poweroff # ranger bindsym $mod+o exec i3-sensible-terminal -e ranger # zathura # bindsym $mod+z exec i3-sensible-terminal -e zathura bindsym $mod+z exec zathura # udisks2 to mount usb bindsym $mod+m exec --no-startup-id \u0026quot;udisksctl mount -o fmask=133,dmask=022 -b /dev/sdc1\u0026quot; bindsym $mod+Shift+m exec --no-startup-id \u0026quot;udisksctl unmount -b /dev/sdc1\u0026quot;  安装的i3-gaps可以增加窗口之间的间隙，feh用来设置壁纸。\ni3status配置 采用了执行脚本的方式，网上下载的脚本。保存在~/.i3status.sh。\n#!/bin/sh # Authors: # - Moritz Warning \u0026lt;moritzwarning@web.de\u0026gt; (2016) # - Zhong Jianxin \u0026lt;azuwis@gmail.com\u0026gt; (2014) # # See file LICENSE at the project root directory for license information. # # i3status.conf should contain: # general { # output_format = i3bar # } # # i3 config looks like this: # bar { # status_command exec /usr/share/doc/i3status/contrib/net-speed.sh # } # # Single interface: # ifaces=\u0026quot;eth0\u0026quot; # # Multiple interfaces: # ifaces=\u0026quot;eth0 wlan0\u0026quot; # # Auto detect interfaces ifaces=$(ls /sys/class/net | grep -E '^(eth|wlan|enp|wlp)') last_time=0 last_rx=0 last_tx=0 rate=\u0026quot;\u0026quot; readable() { local bytes=$1 local kib=$(( bytes \u0026gt;\u0026gt; 10 )) if [ $kib -lt 0 ]; then echo \u0026quot;? K\u0026quot; elif [ $kib -gt 1024 ]; then local mib_int=$(( kib \u0026gt;\u0026gt; 10 )) local mib_dec=$(( kib % 1024 * 976 / 10000 )) if [ \u0026quot;$mib_dec\u0026quot; -lt 10 ]; then mib_dec=\u0026quot;0${mib_dec}\u0026quot; fi echo \u0026quot;${mib_int}.${mib_dec} M\u0026quot; else echo \u0026quot;${kib} K\u0026quot; fi } update_rate() { local time=$(date +%s) local rx=0 tx=0 tmp_rx tmp_tx for iface in $ifaces; do read tmp_rx \u0026lt; \u0026quot;/sys/class/net/${iface}/statistics/rx_bytes\u0026quot; read tmp_tx \u0026lt; \u0026quot;/sys/class/net/${iface}/statistics/tx_bytes\u0026quot; rx=$(( rx + tmp_rx )) tx=$(( tx + tmp_tx )) done local interval=$(( $time - $last_time )) if [ $interval -gt 0 ]; then rate=\u0026quot;Speed: $(readable $(( (rx - last_rx) / interval )))↓ $(readable $(( (tx - last_tx) / interval )))↑\u0026quot; else rate=\u0026quot;\u0026quot; fi last_time=$time last_rx=$rx last_tx=$tx playing=$(ncmpcpp --current-song='%f' 2\u0026gt;/dev/null) } i3status | (read line \u0026amp;\u0026amp; echo \u0026quot;$line\u0026quot; \u0026amp;\u0026amp; read line \u0026amp;\u0026amp; echo \u0026quot;$line\u0026quot; \u0026amp;\u0026amp; read line \u0026amp;\u0026amp; echo \u0026quot;$line\u0026quot; \u0026amp;\u0026amp; update_rate \u0026amp;\u0026amp; while : do read line update_rate echo \u0026quot;,[{\\\u0026quot;full_text\\\u0026quot;:\\\u0026quot;${playing} \\\u0026quot;} , {\\\u0026quot;full_text\\\u0026quot;:\\\u0026quot; ${rate} \\\u0026quot;},${line#,\\[} \u0026quot; || exit 1 done)  添加了显示mpd歌曲名，i3状态栏配置在~/.i2status.conf。\ngeneral { colors = true interval = 1 output_format = i3bar color_good = \u0026quot;#c7edcc\u0026quot; color_degraded = \u0026quot;#8c7f22\u0026quot; color_bad = \u0026quot;#be2422\u0026quot; } order += \u0026quot;disk /\u0026quot; order += \u0026quot;wireless wlp3s0\u0026quot; #order += \u0026quot;ethernet enp0s31f6\u0026quot; order += \u0026quot;cpu_usage\u0026quot; order += \u0026quot;volume master\u0026quot; order += \u0026quot;tztime local\u0026quot; wireless wlp3s0 { format_up = \u0026quot; WiFi: %ip %quality %bitrate \u0026quot; format_down = \u0026quot; WiFi: (/) \u0026quot; } ethernet enp0s31f6 { format_up = \u0026quot; LAN: %ip %speed \u0026quot; format_down = \u0026quot; LAN: (/) \u0026quot; } tztime local { format = \u0026quot; Date: %m/%d/%y Time: %H:%M \u0026quot; } cpu_usage { format = \u0026quot; CPU: %usage \u0026quot; } disk \u0026quot;/\u0026quot; { format = \u0026quot; Disk: %free \u0026quot; } volume master { format = \u0026quot; Vol: %volume \u0026quot; device = \u0026quot;default\u0026quot; mixer = \u0026quot;Master\u0026quot; mixer_idx = 0 }  ","id":6,"section":"posts","summary":"i3是一个非常有效率的窗口管理器。 安装i3和状态栏 $ sudo pacman -S i3-gaps i3status i3 配置 开机启动 在.xinitrc中添加 exec i3 在.bashrc中添加 if [[ \u0026quot;$(tty)\u0026quot; = \u0026quot;/dev/tty1\u0026quot; ]]; then","tags":null,"title":"Arch linux install i3 windows manager","uri":"https://smilelmyan.github.io/2018/08/i3/","year":"2018"},{"content":"urxvt配置.Xresources文件 一般安装rxvt-unicode\n如需要在ranger中支持照片预览，需要安装aur中的rxvt-unicode-pixbuf\n!! Appearance urxvt.termName: rxvt-unicode urxvt.scrollBar: false urxvt.depth: 32 urxvt.background: [70]black urxvt.foreground: grey !! Font prefferenes URxvt.inputMethod:fcitx urxvt.font: xft:DejaVu Sans Mono:pixelsize=16,xft:WenQuanYi Micro Hei Mono:pixelsize=16 urxvt.boldFont: xft:DejaVu Sans Mono:pixelsize=16:weight=bold,xft:WenQuanYi Micro Hei Mono:pixelsize=16:weight=bold urxvt.letterSpace: -1 !! Larger history limit urxvt.saveLines: 1000000 !! Yeah, I am one of those, who use these keys in Vim :-( urxvt.keysym.Home: \\033[1~ urxvt.keysym.End: \\033[4~ urxvt.keysym.Control-Up: \\033[1;5A urxvt.keysym.Control-Down: \\033[1;5B urxvt.keysym.Control-Left: \\033[1;5D urxvt.keysym.Control-Right: \\033[1;5C !! Tango color theme !! Strange - it matches tango from gnome-terminal, but looks different URxvt.color0: rgb:00/00/00 URxvt.color1: rgb:CC/00/00 URxvt.color2: rgb:4E/9A/06 URxvt.color3: rgb:C4/A0/00 URxvt.color4: rgb:34/65/A4 URxvt.color5: rgb:75/50/7B URxvt.color6: rgb:06/98/9A URxvt.color7: rgb:D3/D7/CF URxvt.color8: rgb:55/57/53 URxvt.color9: rgb:EF/29/29 URxvt.color10: rgb:8A/E2/34 URxvt.color11: rgb:FC/E9/4F URxvt.color12: rgb:72/9F/CF URxvt.color13: rgb:AD/7F/A8 URxvt.color14: rgb:34/E2/E2 URxvt.color15: rgb:EE/EE/EC URxvt.colorBD: rgb:ff/ff/ff  中文输入法选用fcitx，中文字体配置比较重要。半透明需要守候运行xcompmgr程序。\n安装fcitx $ sudo pacman -S fcitx fcitx-im fcitx-configtool fcitx-rime  fcitx-configtool配置输入法\nfcitx-diagnose用来查看配置是否正确，一般提示要在.bashrc中导入环境变量\nexport XMODIFIERS=@im=fcitx export QT_IM_MODULE=fcitx export GTK_IM_MODULE=fcitx  修改rime默认输入法为简体中文\n$ vim .config/fcitx/rime/build/default.yaml  调整schema_list顺序，把luna_pinyin_simp移到第一。\n安装软件时gnupg错误 ERROR: One or more PGP signatures could not be verified!  解决办法，~/.gnupg/gpg.conf中添加自动获取\n# auto-key-retrieve = automatically fetch keys as needed from the keyserver keyserver-options auto-key-retrieve  安装vmware aur安装vmware-workstation，安装需要的组件，wiki上有，当时没有安装linux-headers，结果加载模块找不到。\n# modprobe -a vmw_vmci vmmon  ","id":7,"section":"posts","summary":"urxvt配置.Xresources文件 一般安装rxvt-unicode 如需要在ranger中支持照片预览，需要安装aur中的rxvt-un","tags":null,"title":"Arch配置i3桌面的终端和输入法","uri":"https://smilelmyan.github.io/2018/08/config-arch/","year":"2018"},{"content":"安装TexLive archlinux的官方仓库，有textlive-most和texlive-lang两个组包，不想折腾每个组件都是做什么的，most全部安装。\n$ sudo pacman -S texlive-most $ sudo pacman -S texlive-langchinese texlive-langextra  其中texlive-lang里面只安装了和中文相关的。\n安装字体 可以从windows里复制字体，把常用的中英文字体复制到创建msfont文件夹里\n$ sudo mkdir /usr/share/fonts/msfont/ $ sudo cp $WIN_FONTS /usr/share/fonts/msfont/  更新font cache使Linux系统识别新加入的字体。\n$ cd /usr/share/fonts/msfont/ $ sudo mkfontscale $ sudo mkfontdir $ sudo fc-cache -vf  配置xelatex 用来写书的配置，保存在Head.tex文件中。\n\\usepackage[top=3cm,bottom=2.54cm,left=3.17cm,right=3.17cm]{geometry}% 定义页面尺寸 %\\usepackage{zhfontcfg} \\usepackage[log-declarations=false]{xparse} \\usepackage{xeCJK} % 中文支持 \\usepackage{CJKnumb} \\usepackage{indentfirst}% 首行缩进 \\usepackage{fancyhdr}\t% 页眉页脚支持 \\usepackage{graphicx}\t% 支持插图 \\usepackage{titletoc}\t% 修改目录名称 \\usepackage{titlesec} % 修改章节名称 \\usepackage[CJKbookmarks,,colorlinks,linkcolor=black,pdfborder=no]{hyperref} % 生成链接 \\usepackage{amsmath,amssymb}% 插入数学公式环境，数学字体 \\usepackage{caption} % 插入图表标题 \\usepackage{booktabs} % 定义完美表格三线 \\usepackage{ulem} % 下划线 \\usepackage{tabularx} % 调整表格列宽 \\usepackage{xcolor} % 实现彩色 %\\usepackage{CJKfntef} % 插入下划线 \\usepackage{bibentry} % 参考文献 \\usepackage{bm} % 数学字体加粗 \\usepackage[font=small]{caption} % caption 字体设置 \\usepackage{bookmark}\t%生成pdf侧边栏的导航标签 % xeCJK 字体设置 \\setCJKmainfont[BoldFont={SimHei},ItalicFont={KaiTi}]{SimSun} \\setCJKsansfont{SimHei} \\setCJKmonofont{FangSong} \\setmainfont{Times New Roman} \\setCJKfamilyfont{zhsong}{SimSun} \\setCJKfamilyfont{zhhei}{SimHei} \\setCJKfamilyfont{zhkai}{KaiTi} \\setCJKfamilyfont{zhfs}{FangSong} \\setCJKfamilyfont{zhli}{LiSu} \\setCJKfamilyfont{zhyou}{YouYuan} \\newcommand*{\\songti}{\\CJKfamily{zhsong}} % 宋体 \\newcommand*{\\heiti}{\\CJKfamily{zhhei}} % 黑体 \\newcommand*{\\kaishu}{\\CJKfamily{zhkai}} % 楷书 \\newcommand*{\\fangsong}{\\CJKfamily{zhfs}} % 仿宋 \\newcommand*{\\lishu}{\\CJKfamily{zhli}} % 隶书 \\newcommand*{\\youyuan}{\\CJKfamily{zhyou}} % 幼圆 %------------------------------设置字体大小------------------------% \\newcommand{\\chuhao}{\\fontsize{42pt}{\\baselineskip}\\selectfont} %初号 \\newcommand{\\xiaochu}{\\fontsize{36pt}{\\baselineskip}\\selectfont} %小初号 \\newcommand{\\yihao}{\\fontsize{26pt}{\\baselineskip}\\selectfont} %一号 \\newcommand{\\erhao}{\\fontsize{22pt}{\\baselineskip}\\selectfont} %二号 \\newcommand{\\xiaoer}{\\fontsize{18pt}{\\baselineskip}\\selectfont} %小二号 \\newcommand{\\sanhao}{\\fontsize{16pt}{\\baselineskip}\\selectfont} %三号 \\newcommand{\\xiaosan}{\\fontsize{15pt}{\\baselineskip}\\selectfont} %小三号 \\newcommand{\\sihao}{\\fontsize{14pt}{\\baselineskip}\\selectfont} %四号 \\newcommand{\\xiaosi}{\\fontsize{12pt}{\\baselineskip}\\selectfont} %小四号 \\newcommand{\\wuhao}{\\fontsize{10.5pt}{\\baselineskip}\\selectfont} %五号 \\newcommand{\\xiaowu}{\\fontsize{9pt}{\\baselineskip}\\selectfont} %小五号 \\newcommand{\\liuhao}{\\fontsize{7.5pt}{\\baselineskip}\\selectfont} %六号 \\newcommand{\\qihao}{\\fontsize{5.5pt}{\\baselineskip}\\selectfont} %七号 % 页眉页角设置 \\pagestyle{fancy} \\fancyhf{} \\lhead{\\xiaowu 左侧页眉文字} \\rhead{\\xiaowu 右侧页眉文字} \\fancyfoot[EL,OR]{\\thepage} %\\fancyhead[OC]{\\nouppercase{\\fangsong\\rightmark}} %\\fancyhead[EC]{\\nouppercase{\\fangsong\\leftmark}} \\fancypagestyle{plain}{\\renewcommand{\\headrulewidth}{0pt}\\fancyhf{}}% 无页眉线有页脚线 % 重新定义目录名称 \\renewcommand{\\contentsname}{目\\quad 录} \\renewcommand{\\listfigurename}{插图目录} \\renewcommand{\\listtablename}{表格目录} \\renewcommand{\\figurename}{{ 图}} \\renewcommand{\\tablename}{{ 表}} \\renewcommand{\\bibname}{参考文献} \\titlecontents{chapter}[0pt]{\\vspace{0.5\\baselineskip}\\bfseries}{第~\\CJKnumber{\\thecontentslabel}~章~~~}{}{\\titlerule*[0.8pc]{$.$}\\contentspage[{\\makebox[0pt][r]{\\thecontentspage}}]} \\titlecontents{figure}[12mm]{\\kaishu}{\\contentslabel[\\heiti 图~\\thecontentslabel]{12mm}}{}{\\titlerule*[0.5pc]{$.$}\\contentspage[{\\makebox[0pt][r]{\\thecontentspage}}]} \\titlecontents{table}[12mm]{\\kaishu}{\\contentslabel[\\heiti 表~\\thecontentslabel]{12mm}}{}{\\titlerule*[0.5pc]{$.$}\\contentspage[{\\makebox[0pt][r]{\\thecontentspage}}]} \\renewcommand{\\chaptermark}[1]{\\markboth{第~\\CJKnumber{\\thechapter}~章~~~ #1}{}} \\renewcommand{\\sectionmark}[1]{\\markright{\\thesection~~~ #1}} % 重新定义章节名称 \\titlelabel{\\S\\,\\thetitle\\quad} \\titleformat{\\chapter}{\\centering\\sanhao\\bfseries}{第~\\CJKnumber{\\thechapter}~章}{1em}{} \\titlespacing*{\\chapter}{0pt}{*-3}{*3} \\titleformat{\\section}{\\sihao\\bfseries}{\\thesection}{1em}{} \\titleformat{\\subsection}{\\xiaosi\\bfseries}{\\thesubsection}{1em}{} % 定义中文格式 \\graphicspath{{Figures/}}% 图片目录 \\headheight=15pt % 页眉 \\parindent=2.45em % 定义缩进尺寸 \\renewcommand{\\baselinestretch}{1.3}% 定义中文模式全文行距 \\newcolumntype{Y}{\u0026gt;{\\centering\\arraybackslash}X} %表格内容居中 %\\vbadness=1800 % 一大堆的高度不满警告  使用 写论文的时候，新建paper.tex，使用xelatex引擎编译。用过vim写过latex，有好多更容易用的前端软件，vim的latex插件。\n\\documentclass[12pt,a4paper,openany]{book} % utf-8编码，xelatex编译引擎 \\input{Head.tex} % \\begin{document} %--- 首页 \\begin{titlepage} \\begin{center} \\includegraphics[width=6.5cm]{logolzu.pdf} \\vspace{4em} {\\xiaochu \\kaishu 毕~~业~~论~~文} \\sihao \\vspace{1em} {( 本~科~生 )} %\\linespread{2.2} \\vspace{3.0em} \\newlength{\\Mycode} \\settowidth{\\Mycode}{论文题目（中文）} \\linespread{1.8} {\\bf \\makebox[\\Mycode][s]{论文题目（中文）} \\quad \\uline{\\hfill 基于协变密度泛函理论 \\hfill} \\makebox[\\Mycode][s]{} \\quad \\uline{\\hfill 研究电子与He核弹性散射问题 \\hfill} \\makebox[\\Mycode][s]{论文题目（外文）} \\quad \\uline{\\hfill Study on electron helium nuclei scattering \\hfill} \\makebox[\\Mycode][s]{} \\quad \\uline{\\hfill within the covariant density functional theory \\hfill} \\makebox[\\Mycode][s]{学\\hfill 生\\hfill 姓\\hfill 名} \\quad \\uline{\\hfill X~X~X \\hfill} \\makebox[\\Mycode][s]{导师姓名、职称} \\quad \\uline{\\hfill X~X~X（副~教~授） \\hfill} \\makebox[\\Mycode][s]{学生所属学院} \\quad \\uline{\\hfill x~x~x~x~x~x~x~x \\hfill} \\makebox[\\Mycode][s]{专\\hfill 业} \\quad \\uline{\\hfill x~x~x~x~x \\hfill} \\makebox[\\Mycode][s]{年\\hfill 级} \\quad \\uline{\\hfill x~x~x~x~级 \\hfill} } \\vfill {\\wuhao X~X~X~X~教~务~处} \\end{center} \\end{titlepage} % \\chapter*{诚信责任书} \\end{document}  ","id":8,"section":"posts","summary":"安装TexLive archlinux的官方仓库，有textlive-most和texlive-lang两个组包，不想折腾每个组件都是做什么的","tags":["latex"],"title":"latex及字体安装","uri":"https://smilelmyan.github.io/2018/08/latex/","year":"2018"},{"content":"vim的配置文件 ~/.viminfo 在vim中操作的行为，vim会自动记录下来，保存在 ~/.viminfo 文件中。这样为了方便下次处理，如：vim打开文件时，光标会自动在上次离开的位置显示。原来搜索过的字符串，新打开文件时自动高亮显示。\n~/.vimrc vimrc文件是vim的环境设置文件。整体的vim的设置是在 /etc/vimrc 文件中。不建议修改/etc/vimrc 文件，每个用户可以在用户根目录中设置vim，新建 ~/.vimrc。\n学习配置 从读手册开始，官方帮助文档有中文的，下载下来慢慢看。\nhttp://vimcdoc.sourceforge.net/  插件 vim-plug vim-plug插件管理软件，安装\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim  .vimrc中填写配置\ncall plug#begin('~/.vim/plugged') Plug '插件名称' call plug#end()  常用命令：\n安装 PlugInstall\n安装或更新 PlugUpdate\n更新vim-plug PlugUpgrade\nvimtex vimtex是一个书写latex的轻量级插件，安装需填写\nPlug 'lervag/vimtex'  配置简单，支持大多数pdf阅读器，对于我使用的Zathura，需要在vimrc中添加配置\nlet g:tex_flavor = 'latex' let g:vimtex_view_method = \u0026quot;zathura\u0026quot;  如果使用Okular阅读器，需要在vimrc中添加配置\nlet g:tex_flavor = 'latex' let g:vimtex_view_general_viewer = 'okular' let g:vimtex_view_general_options = '--unique file:@pdf\\#src:@line@tex' let g:vimtex_view_general_options_latexmk = '--unique'  并且如果要支持反向搜索，在Okular设置中的Editor选项，选Custom Text Editor，输入\nvim --remote-silent %f -c %l  详细内容查看wiki，常用命令：\n\\ll 编译，使用的latexmk引擎，实时编译预览，再按一下停止编译。\n\\lv 预览，调用默认pdf阅读器。\n\\lm 查看默认映射，方便输入数学字母，`开头。\n平常写中文使用xelatex引擎，需要在文档开头添加\n%！ TEX program = xelatex  ","id":9,"section":"posts","summary":"vim的配置文件 ~/.viminfo 在vim中操作的行为，vim会自动记录下来，保存在 ~/.viminfo 文件中。这样为了方便下次处理，如：vim打开文件时，光标会自动在上次离","tags":null,"title":"vim编辑器","uri":"https://smilelmyan.github.io/2018/08/vim-config/","year":"2018"},{"content":"搭建文件分享服务，方便和其它设备共享文件。\n安装 $ sudo pacman -S samba  配置 获取默认配置文件\n$ sudo wget \u0026quot;https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD\u0026quot; -O /etc/samba/smb.conf  编辑 /etc/samba/smb.conf，折腾了好几个小时，才发现自己需要的功能是如此好配置。\n大部分参数默认就不贴了，注释掉不用的打印功能。就改动两处\n修改一行\nlog file = /var/log/samba/log.%m  在[homes]中添加一行\nvalid users = myname  添加myname的samba密码，myname是我的linux账户名\n$ sudo smbpasswd -a myname  启动smb服务\n$ sudo systemctl enable smb.service $ sudo systemctl start smb.service  用虚拟机安装的windows使用NAT连接可直映射\n\\\\host ip\\homes  输入刚才的账户密码。至此home目录下的内容就可以被windows访问了。\n说明 模板中[homes]默认开启用户家目录的共享，需要在原配置中增加\n valid users = %S  %S表示所有用户，如果只有我一个人，改成自己的用户名就好了。\n其它共享文件的方案需注意，path后的路径，每一层权限都要设置为777，要不进不去。 对于这种public模式的共享，须在[global]中添加\nsecurity = user map to guest = Bad User  4.xx的版本设置方法，可实现匿名登录，默认匿名用户名是nobody。\n","id":10,"section":"posts","summary":"搭建文件分享服务，方便和其它设备共享文件。 安装 $ sudo pacman -S samba 配置 获取默认配置文件 $ sudo wget \u0026quot;https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD\u0026quot; -O /etc/samba/smb.conf 编辑 /etc/samba/smb.conf，折腾了好","tags":null,"title":"samba文件共享","uri":"https://smilelmyan.github.io/2018/08/samba-install/","year":"2018"},{"content":"安装 $ sudo pacman -S aria2  配置 配置文件\n~/.config/aria2/aria2.conf ~/Desktop/aria2.session  aria2.conf配置文件内容，aria2.session是用来存地址的。\n#允许rpc enable-rpc=true #允许所有来源, web界面跨域权限需要 rpc-allow-origin-all=true #允许非外部访问 rpc-listen-all=true #RPC端口, 仅当默认端口被占用时修改 #rpc-listen-port=6800 #最大同时下载数(任务数), 路由建议值: 3 max-concurrent-downloads=5 #断点续传 continue=true #同服务器连接数 max-connection-per-server=10 #最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要 min-split-size=1M #单文件最大线程数, 路由建议值: 5 split=100 #下载速度限制 max-overall-download-limit=0 #单文件速度限制 max-download-limit=0 #上传速度限制 max-overall-upload-limit=0 #单文件速度限制 max-upload-limit=0 #断开速度过慢的连接 #lowest-speed-limit=0 #验证用，需要1.16.1之后的release版本 #referer=* #从会话文件中读取下载任务 input-file=/home/lmyan/Desktop/aria2.session #在Aria2退出时保存`错误/未完成`的下载任务到会话文件 save-session=/home/lmyan/Desktop/aria2.session #定时保存会话，需要1.16.1之后的release版 #save-session-interval=60 #文件保存路径, 默认为当前启动位置 dir=/home/lmyan/Downloads #文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本 #disk-cache=0 #另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?) #enable-mmap=true #文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长 #所需时间 none \u0026lt; falloc ? trunc \u0026lt;\u0026lt; prealloc, falloc和trunc需要文件系统和内核支持 file-allocation=prealloc #启用本地节点查找 bt-enable-lpd=true #添加额外的tracker #bt-tracker=\u0026lt;URI\u0026gt;,… #单种子最大连接数 #bt-max-peers=55 #强制加密, 防迅雷必备 #bt-require-crypto=true #当下载的文件是一个种子(以.torrent结尾)时, 自动下载BT follow-torrent=true #BT监听端口, 当端口屏蔽时使用 #listen-port=6881-6999 #不确定是否需要，为保险起见，need more test enable-dht=false bt-enable-lpd=false enable-peer-exchange=false #修改特征 user-agent=uTorrent/2210(25130) peer-id-prefix=-UT2210- #修改做种设置, 允许做种 seed-ratio=0 #保存会话 force-save=false bt-hash-check-seed=true bt-seed-unverified=true bt-save-metadata=true #定时保存会话，需要1.16.1之后的某个release版本（比如1.16.2） #save-session-interval=60  配置后台守护运行 sudo vim /etc/systemd/user/aria2.service  内容\n[Unit] Description=Aria2 Service After=network.target [Service] ExecStart=/usr/bin/aria2c --conf-path=%h/.config/aria2/aria2.conf [Install] WantedBy=default.target  开机启动\n$ systemctl --user enable aria2 $ systemctl --user start aria2  Firefox插件 https://addons.mozilla.org/en-Us/firefox/tag/aria2  用的ariaNG，闪电图标，配置好参数，连接成功之后就可以用了，功能很全。\nPacman加速 修改/etc/pacman.conf，添加\nXferCommand = /usr/bin/aria2c --allow-overwrite=true --continue=true --file-allocation=none --log-level=error --max-tries=5 --max-connection-per-server=3 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=true --summary-interval=60 --timeout=5 --dir=/ --out %o %u  ","id":11,"section":"posts","summary":"安装 $ sudo pacman -S aria2 配置 配置文件 ~/.config/aria2/aria2.conf ~/Desktop/aria2.session aria2.conf配置文件内容，aria2.session是用来存地址的。 #允许rpc enable-rpc=true #允许所有来源, we","tags":null,"title":"arira2下载工具","uri":"https://smilelmyan.github.io/2018/07/arira2-install/","year":"2018"},{"content":"安装 $ sudo pacman -S mpd mpc ncmpcpp  mpd 配置 个人配置文件~/.config/mpd/mpd.conf\n$ mkdir ~/.config/mpd $ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf  取消注释即可，这里我只用了\nmusic_directory \u0026quot;~/Music/\u0026quot; playlist_directory \u0026quot;~/.config/mpd/playlists\u0026quot; db_file \u0026quot;~/.config/mpd/database\u0026quot;  又加了一条，要不然重启之后总是从头播放。没有的配置文件夹、文件要手动创建，比如playlists文件夹和state文件。\nstate_file\t\u0026quot;~/.config/mpd/state\u0026quot;  mpd会自动检测音频设备，所以这三行配置就可以工作了，其他内容默认。 为了在ncmpcpp中实现可视化功能，需要在配置中加入两个输出\naudio_output { type \u0026quot;alsa\u0026quot; name \u0026quot;ALSA sound card\u0026quot; } audio_output { type \u0026quot;fifo\u0026quot; name \u0026quot;my_fifo\u0026quot; path \u0026quot;/tmp/mpd.fifo\u0026quot; format \u0026quot;44100:16:2\u0026quot; }  设置开机启动，需要修改一下配置文件 /usr/lib/systemd/user/mpd.service，要不然找不发到配置文件，不知道有没有其它好办法。\nExecStart=/usr/bin/mpd %h/.config/mpd/mpd.conf --no-daemon $ systemctl --user enable mpd  用mpc更新数据库\nmpc update  加载所有歌曲到播放列表\nmpc listall | mpc add  保存这个播放列表\nmpc save myplaylist  自动存在mpd定义的播放列表文件夹里\n配置ncmpcpp 配置文件~/.ncmpcpp/config\n$ cp /usr/share/doc/ncmpcpp/config ~/.ncmpcpp/config  目前就修改了两个参数\nmpd_music_dir = ~/Music visualizer_type = spectrum  其它还有好多配置，目前还用不到。输入ncmpcpp就可以启动，附上常用命令，有问题按F1。\n 1 - Current playlist 2 - Filesystem browser 3 - DB search 4 - Library 8 - Music visualizer    Next track    \u0026lt; - Previous track p - Play/Pause s - Stop     Increase volume 2%         Decrease volume 2%      不显示标题栏和状态栏\nheader_visibility = no statusbar_visibility = no  添加到i3status显示歌曲名称 参考\n https://i3wm.org/docs/i3bar-protocol.html https://github.com/i3/i3status/blob/master/contrib/net-speed.sh  创建i3status脚本执行方式，把net-speed的脚本复制进去。添加歌曲名称显示内容，有改动的部分：\n playing=$(ncmpcpp --current-song='%f' 2\u0026gt;/dev/null) } i3status | (read line \u0026amp;\u0026amp; echo \u0026quot;$line\u0026quot; \u0026amp;\u0026amp; read line \u0026amp;\u0026amp; echo \u0026quot;$line\u0026quot; \u0026amp;\u0026amp; read line \u0026amp;\u0026amp; echo \u0026quot;$line\u0026quot; \u0026amp;\u0026amp; update_rate \u0026amp;\u0026amp; while : do read line update_rate echo \u0026quot;,[{\\\u0026quot;full_text\\\u0026quot;:\\\u0026quot;${playing} \\\u0026quot;} , {\\\u0026quot;full_text\\\u0026quot;:\\\u0026quot; ${rate} \\\u0026quot;},${line#,\\[} \u0026quot; || exit 1 done)  添加i3音乐控制快捷键 安装mpd的控制命令mpc，在i3配置文件中输入\n# media mpc bindsym $mod+p exec mpc toggle bindsym $mod+comma exec mpc prev bindsym $mod+period exec mpc next  找了一个可以删除歌曲的脚本，removesong.sh，其中的音乐文件夹的路径改成自己的。Xdialog要自己安装， 原本用的Kdialog。\n#!/bin/bash Xdialog --title \u0026quot;Removing the song\u0026quot; --yesno \u0026quot;Do you really want to delete the song \\n$(mpc | head -n 1)?\u0026quot; 6 20 #If Yes, then 0 is returned, else 1 reply=$(echo $?) if [[ reply -eq 0 ]];then song_to_remove=$(mpc | head -n 1) playlist_pos=$(mpc -f %position% | head -n 1) #Delete the song rm \u0026quot;$(mpc -f %file% | head -n 1 | sed 's/^/\\/~\\/Music\\//')\u0026quot; #Remove the song from playlist mpc del $playlist_pos fi  ","id":12,"section":"posts","summary":"安装 $ sudo pacman -S mpd mpc ncmpcpp mpd 配置 个人配置文件~/.config/mpd/mpd.conf $ mkdir ~/.config/mpd $ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf 取消注释即可，这里我只用了 music_directory \u0026quot;~/Music/\u0026quot; playlist_directory \u0026quot;~/.config/mpd/playlists\u0026quot; db_file \u0026quot;~/.config/mpd/database\u0026quot; 又加了一","tags":null,"title":"Arch linux i3-gaps install mpd ncmpcpp","uri":"https://smilelmyan.github.io/2018/07/mpd-ncmpcpp/","year":"2018"},{"content":"linux安装hugo环境 Arch linux从community仓库安装输入：\n$ sudo pacman -Syu hugo  Ubuntu安装最新版：\n$ sudo snap install hugo  查看版本。当时安装v0.44版，使用hugo server -t 调用主题出现bug，在配置文件里使用(theme = \u0026ldquo;theme name\u0026rdquo;)正常。\n$ hugo version  第一步创建自己的网站根目录\n$ hugo new site mysite  目录下默认有这些文件,其中config.toml是配置文件，创建的文档会在content目录下。\ndrwxr-xr-x 9 lmyan lmyan 4096 Jul 27 21:18 . drwx------ 21 lmyan lmyan 4096 Jul 27 21:26 .. drwxr-xr-x 2 lmyan lmyan 4096 Jul 24 20:39 archetypes -rw-r--r-- 1 lmyan lmyan 2499 Jul 27 21:18 config.toml drwxr-xr-x 3 lmyan lmyan 4096 Jul 27 21:26 content drwxr-xr-x 2 lmyan lmyan 4096 Jul 24 20:39 data drwxr-xr-x 2 lmyan lmyan 4096 Jul 24 20:39 layouts drwxr-xr-x 2 lmyan lmyan 4096 Jul 24 20:56 resources drwxr-xr-x 3 lmyan lmyan 4096 Jul 27 19:37 static drwxr-xr-x 3 lmyan lmyan 4096 Jul 26 22:25 themes  配置hugo 安装主题，比如Pickles\n$ cd themes $ git clone -b release https://github.com/mismith0227/hugo_theme_pickles  自动安装好，国内不用代理都下载不下来，没有全局代理的可以安装proxychains，直接从主题模板里复制配置文件把默认的替换掉，并且配置文件里加上（theme = \u0026ldquo;hugo_theme_pickles\u0026rdquo;）。\n$ cp themes/hugo_theme_pickles/exampleSite/config.toml .  创建自己的第一个文档\nhugo new posts/first-site.md  这条语句会在content文件夹下创建posts文件夹及first-site.md。md代表markdown语法，没学过的自学一会。新创建的文件里有:\ndraft: ture  代表此文件为草稿，写好文章后改为false。\n在draft下一行增加tags标记：\ntags: [\u0026quot;tag1\u0026quot;,\u0026quot;tag2\u0026quot;,\u0026quot;tag3\u0026quot;]  启动hugo服务，加上-D参数表示编译草稿，要不看不到。\n$ hugo server -D  在浏览器输入http://localhost:1313 就可以看到博客内容了。\n$ hugo new about.md  创建一个说明页面，文件会生成在content目录下，用来自我介绍。 比如配置文件里baseurl代表自己的域名，其他条目有的就可以改成自己的。\nstatic文件用来存放图片、css、js等，优先级比theme里的高，如果要添加favicon，把图标放到里面，调用的时候把配置文家里的路径改一下。比如我创建了images文件夹。\nfavicon = \u0026quot;/images/favicon.jpg\u0026quot;  添加评论功能，模板中集成disqus，config.toml中输入参数disqus = “id”。登录disqus.com，点GET STRATED。然后选 I want to install Disqus on my site，填写信息，其中Website Name就是配置文件中要填写的id。\n添加google analytics，注册，在配置文件中填写ga_api_key一项。\n安装git 注册帐号，网上有教程，要注意的是把Respository name改成Your-name.github.io，这样可以通过这个地址直接访问。\n配置SSH，生成密钥\n$ ssh-keygen -t rsa -C \u0026quot;youremail@example.com\u0026quot;  之后在.ssh目录下生成私钥和公钥\nid_rsa 私钥，不能泄露出去 id_rsa.pub 公钥，可告诉任何人  登录Github，依次点击”settings”——\u0026gt;”SSH and GPG keys”——\u0026gt;”New SSH Key”，Title随便写，可以用cat命令查看id_ras.pub,复制到Key的文本框里，Add SSH Key。\n本地安装Git软件包，安装好后配置:\n$ git config --global user.name \u0026quot;Your Name\u0026quot; $ git config --global user.email \u0026quot;email@example.com\u0026quot;  托管到github $ hugo  生成HTML文件至public目录，将public里面的内容上传到github\n$ cd public $ git init $ git remote add origin git@github.com:username/username.github.io.git $ git add -A $ git commit -m \u0026quot;first commit\u0026quot; $ git push -u origin master  之后更新文章并生成好静态页面以后，就可以使用 Git push 来同步了。\n$ cd public $ git add . $ git status $ git commit -m \u0026quot;add blog post\u0026quot; $ git push  一键部署脚本\n#!/bin/bash echo -e \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026quot; msg=\u0026quot;rebuilding site `date`\u0026quot; if [ $# -eq 1 ] then msg=\u0026quot;$1\u0026quot; fi hugo cd public git add -A git commit -m \u0026quot;$msg\u0026quot; git push --force -u origin master cd ../  默认用日期表示提交，也可以用./deploy.sh commit内容的方式。\n从另一台电脑编辑 $ git clone git@github.com:username/repositories.git  ","id":13,"section":"posts","summary":"linux安装hugo环境 Arch linux从community仓库安装输入： $ sudo pacman -Syu hugo Ubuntu安装最新版： $ sudo snap install hugo 查看版本。当时安装v0.","tags":["git"],"title":"Linux Install Hugo \u0026 Git","uri":"https://smilelmyan.github.io/2018/07/hugo/","year":"2018"}],"tags":[{"title":"git","uri":"https://smilelmyan.github.io/tags/git/"},{"title":"latex","uri":"https://smilelmyan.github.io/tags/latex/"},{"title":"Rime输入法","uri":"https://smilelmyan.github.io/tags/rime%E8%BE%93%E5%85%A5%E6%B3%95/"},{"title":"wps","uri":"https://smilelmyan.github.io/tags/wps/"}]}